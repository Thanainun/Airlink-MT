/* 
*	@name							Zozo UI Tabs
*	@descripton						Create awesome tabbed content area
*	@version						2.2
*	@copyright                      Copyright (c) 2012 Zozo UI, http://www.zozoui.com 
*/

; (function (e, t, n, r) { if (!t.console) t.console = {}; if (!t.console.log) t.console.log = function () { }; e.fn.extend({ hasClasses: function (t) { var n = this; for (i in t) { if (e(n).hasClass(t[i])) return true } return false } }); e.zozo = {}; e.zozo.core = {}; e.zozo.core.console = { log: function (t) { if (e("#console").length != 0) { e("<div/>").css({ marginTop: -24 }).html(t).prependTo("#console").animate({ marginTop: 0 }, 300).animate({ backgroundColor: "#ffffff" }, 800) } else { if (console) { console.log(t) } } } }; e.zozo.core.keyCodes = { tab: 9, enter: 13, esc: 27, space: 32, pageup: 33, pagedown: 34, end: 35, home: 36, left: 37, up: 38, right: 39, down: 40 }; e.zozo.core.debug = { startTime: new Date, log: function (e) { if (console) { console.log(e) } }, start: function () { this.startTime = +(new Date); this.log("start: " + this.startTime) }, stop: function () { var e = +(new Date); var t = e - this.startTime; this.log("end: " + e); this.log("diff: " + t); var n = t / 1e3; var r = Math.abs(n) } }; e.zozo.core.plugins = { easing: function (t) { var n = false; if (t) { if (t.settings) { var r = "swing"; if (e.easing.def) { n = true } else { if (t.settings.animation.easing != "swing" && t.settings.animation.easing != "linear") { t.settings.animation.easing = r } } } } return n } }; e.zozo.core.browser = { init: function () { this.browser = this.searchString(this.dataBrowser) || "An unknown browser"; this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version"; e.zozo.core.console.log("init: " + this.browser + " : " + this.version); if (this.browser === "Explorer") { var t = e("html"); var n = parseInt(this.version); if (n === 6) { t.addClass("ie ie7") } else if (n === 7) { t.addClass("ie ie7") } else if (n === 8) { t.addClass("ie ie8") } else if (n === 9) { t.addClass("ie ie9") } } }, searchString: function (e) { for (var t = 0; t < e.length; t++) { var n = e[t].string; var r = e[t].prop; this.versionSearchString = e[t].versionSearch || e[t].identity; if (n) { if (n.indexOf(e[t].subString) != -1) return e[t].identity } else if (r) return e[t].identity } }, searchVersion: function (e) { var t = e.indexOf(this.versionSearchString); if (t == -1) return; return parseFloat(e.substring(t + this.versionSearchString.length + 1)) }, dataBrowser: [{ string: navigator.userAgent, subString: "Chrome", identity: "Chrome" }, { string: navigator.vendor, subString: "Apple", identity: "Safari", versionSearch: "Version" }, { prop: t.opera, identity: "Opera" }, { string: navigator.userAgent, subString: "Firefox", identity: "Firefox" }, { string: navigator.userAgent, subString: "MSIE", identity: "Explorer", versionSearch: "MSIE"}] }; e.zozo.core.hashHelper = { all: function () { var e = []; var t = n.location.hash; if (!this.hasHash()) { return e } t = t.substring(1).split("&"); for (var r = 0; r < t.length; r++) { var i = t[r].split("="); if (i.length != 2 || i[0] in e) { i[1] = "none" } e[i[0]] = i[1] } return e }, get: function (e) { var t = this.all(); if (typeof t === "undefined" || typeof t.length < 0) { return null } else { if (typeof t[e] !== "undefined" && t[e] !== null) { return t[e] } else { return null } } }, set: function (e, t) { var r = this.all(); var i = []; r[e] = t; for (var e in r) { i.push(e + "=" + r[e]) } n.location.hash = i.join("&") }, hasHash: function () { var e = n.location.hash; if (e.length > 0) { return true } else { return false } } }; e.zozo.core.browser.init() })(jQuery, window, document); (function (e, t, n, r) { if (t.zozo == null) { t.zozo = {} } var i = function (t, n) { this.elem = t; this.$elem = e(t); this.options = n; this.metadata = this.$elem.data("options") ? this.$elem.data("options") : {}; this.attrdata = this.$elem.data() ? this.$elem.data() : {}; this.tabID; this.$tabGroup; this.$tabs; this.$container; this.$contents; this.autoplayIntervalId; this.currentTab; this.BrowserDetection = e.zozo.core.browser; this.Hash = e.zozo.core.hashHelper }; var s = { pluginName: "zozoTabs", elementSpacer: "<span class='z-tab-spacer' style='clear: both;display: block;'></span>", commaRegExp: /,/g, space: " ", classes: { prefix: "z-", wrapper: "z-tabs", tabGroup: "z-tabs-nav", tab: "z-tab", first: "z-first", last: "z-last", active: "z-active", link: "z-link", container: "z-container", content: "z-content", shadows: "z-shadows", rounded: "z-rounded", themes: { gray: "gray", black: "black", blue: "blue", crystal: "crystal", green: "green", silver: "silver", red: "red", orange: "orange", deepblue: "deepblue", white: "white" }, styles: { normal: "normal", underlined: "underlined", simple: "simple" }, orientations: { vertical: "vertical", horizontal: "horizontal" }, sizes: { mini: "mini", small: "small", medium: "medium", large: "large", xlarge: "xlarge", xxlarge: "xxlarge" }, positions: { topLeft: "top-left", topCenter: "top-center", topRight: "top-right", topCompact: "top-compact", bottomLeft: "bottom-left", bottomCenter: "bottom-center", bottomRight: "bottom-right", bottomCompact: "bottom-compact"}} }; i.prototype = { defaults: { animation: { duration: 200, effects: "fadeIn", easing: "swing" }, autoplay: { interval: 0 }, defaultTab: "tab1", event: "click", hashAttribute: "data-link", position: s.classes.positions.topLeft, orientation: s.classes.orientations.horizontal, rounded: true, shadows: true, tabWidth: 150, tabHeight: 51, theme: s.classes.themes.silver, urlBased: false, select: function (e, t) { }, size: s.classes.sizes.medium, style: s.classes.styles.normal }, init: function () { var r = this; r.settings = e.extend(true, {}, r.defaults, r.options, r.metadata, r.attrdata); o.updateClasses(r); o.bindEvents(r); if (r.settings.urlBased === true) { if (n.location.hash) { var i = r.Hash.get(r.tabID); if (i != null) { o.showTab(r, i) } else { o.showTab(r, r.settings.defaultTab) } } else { o.showTab(r, r.settings.defaultTab) } if (typeof e(t).hashchange != "undefined") { e(t).hashchange(function () { var e = r.Hash.get(r.tabID); if (r.currentTab.attr(r.settings.hashAttribute) !== e) { o.showTab(r, e) } }) } else { e(t).bind("hashchange", function () { var e = r.Hash.get(r.tabID); if (r.currentTab.attr(r.settings.hashAttribute) !== e) { o.showTab(r, e) } }) } } else { o.showTab(r, r.settings.defaultTab) } o.initAutoPlay(r); return this }, setOptions: function (t) { var n = this; n.settings = e.extend(true, n.settings, t); o.updateClasses(n); o.initAutoPlay(n); return n }, add: function (e, t) { var n = this; var r = o.create(e, t); r.tab.appendTo(n.$tabGroup).hide().fadeIn(500); r.content.appendTo(n.$container); o.updateClasses(n); o.bindEvent(n, r.tab); return n }, remove: function (t) { var n = this; var r = t - 1; var i = n.$tabs.eq(r); var s = n.$contents.eq(r); s.remove(); i.fadeOut(500, function () { e(this).remove(); o.updateClasses(n) }); return n }, select: function (e) { var t = this; o.changeHash(t, t.$elem.find("> ul > li").eq(e - 1).attr(t.settings.hashAttribute)); return t }, first: function () { var e = this; e.select(o.getFirst()); return e }, prev: function () { var e = this; var t = parseInt(e.currentTab.index()) + 1; if (t <= o.getFirst(e)) { e.select(o.getLast(e)) } else { e.select(t - 1); o.log("prev tab : " + (t - 1)) } return e }, next: function (e) { e = e ? e : this; var t = parseInt(e.currentTab.index()) + 1; var n = parseInt(e.$tabGroup.children("li").size()); if (t >= n) { e.select(o.getFirst()) } else { e.select(t + 1); o.log("next tab : " + (t + 1)) } return e }, last: function () { var e = this; e.select(o.getLast(e)); return e }, play: function (e) { var t = this; if (e == null || e < 0) { e = 2e3 } t.settings.autoplay.interval = e; t.stop(); t.autoplayIntervalId = setInterval(function () { t.next(t) }, t.settings.autoplay.interval); return t }, stop: function (e) { e = e ? e : this; clearInterval(e.autoplayIntervalId); return e } }; var o = { log: function (e) { if (console) { console.log(e) } }, isEmpty: function (e) { return !e || 0 === e.length }, updateClasses: function (t) { t.tabID = t.$elem.attr("id"); t.$tabGroup = t.$elem.find("> ul").addClass(s.classes.tabGroup); t.$tabs = t.$tabGroup.find("> li"); t.$container = t.$elem.find("> div"); t.$contents = t.$container.find("> div"); t.$container.addClass(s.classes.container); t.$contents.addClass(s.classes.content); t.$tabs.each(function (n, r) { e(r).removeClass(s.classes.first).removeClass(s.classes.last).attr(t.settings.hashAttribute, "tab" + (n + 1)).addClass(s.classes.tab).find("a").addClass(s.classes.link) }); t.$tabs.filter(s.classes.first + ":not(:first-child)").removeClass(s.classes.first); t.$tabs.filter(s.classes.last + ":not(:last-child)").removeClass(s.classes.last); t.$tabs.filter("li:first-child").addClass(s.classes.first); t.$tabs.filter("li:last-child").addClass(s.classes.last); var n = o.toArray(s.classes.styles); var r = o.toArray(s.classes.themes); var i = o.toArray(s.classes.sizes); var u = o.toArray(s.classes.positions); t.$elem.removeClass(s.classes.wrapper).removeClass(s.classes.orientations.vertical).removeClass(s.classes.orientations.horizontal).removeClass(s.classes.rounded).removeClass(s.classes.shadows).removeClass(n.join().replace(s.commaRegExp, s.space)).removeClass(u.join().replace(s.commaRegExp, s.space)).removeClass(i.join().replace(s.commaRegExp, s.space)).addClass(t.settings.style).addClass(t.settings.size); if (!o.isEmpty(t.settings.theme)) { t.$elem.removeClass(r.join().replace(s.commaRegExp, s.space)).addClass(t.settings.theme) } else { if (!t.$elem.hasClasses(r)) { t.$elem.addClass(s.classes.themes.silver) } } if (t.settings.rounded === true) { t.$elem.addClass(s.classes.rounded) } if (t.settings.shadows === true) { t.$elem.addClass(s.classes.shadows) } o.checkPosition(t) }, checkPosition: function (t) { t.$container.appendTo(t.$elem); t.$tabGroup.prependTo(t.$elem); t.$elem.find("> span.z-tab-spacer").remove(); t.$elem.addClass(s.classes.wrapper); if (t.settings.orientation === s.classes.orientations.vertical) { t.$elem.addClass(s.classes.orientations.vertical); var n = t.settings.tabHeight; switch (t.settings.size) { case s.classes.sizes.mini: n = 33; break; case s.classes.sizes.small: n = 39; break; case s.classes.sizes.medium: n = 45; break; case s.classes.sizes.large: n = 51; break; case s.classes.sizes.xlarge: n = 57; break; case s.classes.sizes.xxlarge: n = 63; break; default: n = 45 } var r = parseInt(t.$tabGroup.children("li").size()); var i = n * r - 1; t.$container.css({ "min-height": i, padding: 0, "margin-top": 0, "margin-bottom": 0 }); if (t.settings.position !== s.classes.positions.topRight) { t.settings.position = s.classes.positions.topLeft } } else { t.settings.orientation = s.classes.orientations.horizontal; t.$elem.addClass(s.classes.orientations.horizontal); if (t.settings.position === s.classes.positions.bottomLeft || t.settings.position === s.classes.positions.bottomCenter || t.settings.position === s.classes.positions.bottomRight || t.settings.position === s.classes.positions.bottomCompact) { t.$tabGroup.appendTo(t.$elem); e(s.elementSpacer).appendTo(t.$elem); t.$container.prependTo(t.$elem) } } if (t.settings.position === s.classes.positions.topCompact || t.settings.position === s.classes.positions.bottomCompact) { var o = parseInt(t.$tabGroup.children("li").size()); var u = t.settings.tabWidth * o; switch (t.BrowserDetection.browser) { case "Firefox": break; case "Explorer": switch (t.BrowserDetection.version) { case 7: u = u + 1; break; default: } break; default: u = u + 1 } t.$elem.css("width", u + "px"); t.$tabs.each(function (n, r) { e(r).css("width", t.settings.tabWidth + "px") }) } else { t.$elem.css("width", ""); t.$tabs.each(function (t, n) { e(n).css("width", "") }) } t.$elem.addClass(t.settings.position) }, bindEvents: function (t) { t.$tabs.each(function () { o.bindEvent(t, e(this)) }) }, bindEvent: function (e, t) { t.on(e.settings.event, function () { e.stop(); o.changeHash(e, t.attr(e.settings.hashAttribute)) }) }, showTab: function (e, t) { if (t != null) { e.$tabs.removeClass(s.classes.active); e.currentTab = e.$tabs.filter("li[" + e.settings.hashAttribute + "=" + t + "]"); e.currentTab.addClass(s.classes.active); var n = e.$tabs.index(e.currentTab); if (e.settings.animation !== false && e.settings.animation != null) { if (e.settings.animation.effects === "fadeIn") { e.$contents.removeClass(s.classes.active).hide().eq(n).addClass(s.classes.active).fadeIn(e.settings.animation.duration, e.settings.animation.easing) } else if (e.settings.animation.effects === "slideDown") { e.$contents.removeClass(s.classes.active).slideUp(200).eq(n).addClass(s.classes.active).slideDown(e.settings.animation.duration, e.settings.animation.easing) } else if (e.settings.animation.effects === "slideToggle") { e.$contents.removeClass(s.classes.active).hide().eq(n).addClass(s.classes.active).slideToggle(e.settings.animation.duration, e.settings.animation.easing) } else if (e.settings.animation.effects === "fadeToggle") { e.$contents.removeClass(s.classes.active).hide().eq(n).addClass(s.classes.active).fadeToggle(e.settings.animation.duration, e.settings.animation.easing) } else if (e.settings.animation.effects === "slideUp") { e.$contents.removeClass(s.classes.active).slideUp(200).eq(n).addClass(s.classes.active).slideDown(e.settings.animation.duration, e.settings.animation.easing) } } else { e.$contents.removeClass(s.classes.active).hide().eq(n).addClass(s.classes.active).show() } if (typeof e.settings.select == "function") { e.settings.select.call(this, e.currentTab, e.$contents.eq(n)) } } }, initAutoPlay: function (e) { if (e.settings.autoplay !== false && e.settings.autoplay != null) { if (e.settings.autoplay.interval > 0) { e.stop(); e.autoplayIntervalId = setInterval(function () { e.next(e) }, e.settings.autoplay.interval) } else { e.stop() } } else { e.stop() } }, changeHash: function (n, r) { if (n.settings.urlBased === true) { if (typeof e(t).hashchange != "undefined") { n.Hash.set(n.tabID, r) } else { o.log("browser: " + n.BrowserDetection.browser + " version: " + n.BrowserDetection.version); if (n.BrowserDetection.browser === "Explorer" && n.BrowserDetection.version <= 7) { o.log("IE"); o.showTab(n, r) } else { n.Hash.set(n.tabID, r) } } } else { o.showTab(n, r) } }, getFirst: function (e) { return 1 }, getLast: function (e) { return parseInt(e.$tabGroup.children("li").size()) }, create: function (t, n) { var r = e("<li><a>" + t + "</a></li>"); var i = e("<div>" + n + "</div>"); return { tab: r, content: i} }, toArray: function (t) { return e.map(t, function (e, t) { return e }) } }; i.defaults = i.prototype.defaults; e.fn.zozoTabs = function (t) { return this.each(function () { if (r == e(this).data(s.pluginName)) { var n = (new i(this, t)).init(); e(this).data(s.pluginName, n) } }) }; t.zozo.tabs = i; e(n).ready(function () { e("[data-role='z-tabs']").each(function (t, n) { if (!e(n).zozoTabs()) { e(n).zozoTabs() } }) }) })(jQuery, window, document)